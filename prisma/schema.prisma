generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  fullName   String
  email      String    @unique
  password   String
  role       UserRole  @default(USER)
  verified   DateTime?
  provider   String?
  providerId String?

  // one user to one cart
  cart Cart?

  orders Order[]

  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  // one Product to one Category
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  // several Products to several Ingredients
  ingredients Ingredient[]

  // several ProductItem (variants) to one product
  items ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id          Int  @id @default(autoincrement())
  price       Int
  size        Int?
  productType Int?

  // one product to several ProductItems
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  // one Category to several Products
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  // several Ingredients to several Products
  products Product[]

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  // one cart to one user
  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]

  totalAmount Int @default(0)

  token String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int @default(1)

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  address     String
  email       String
  phone       String
  comment     String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id   Int    @id @default(autoincrement())
  code String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
